{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactFauxDom = require('react-faux-dom');\n\nvar _reactFauxDom2 = _interopRequireDefault(_reactFauxDom);\n\nvar _d = require('d3');\n\nvar _shared = require('../shared');\n\nvar _interpolate = require('../interpolate');\n\nvar _interpolate2 = _interopRequireDefault(_interpolate);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _radium = require('radium');\n\nvar _lodash = require('lodash.merge');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _d3TimeFormat = require('d3-time-format');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar dateParser = {};\n\nvar LineChart = function (_React$Component) {\n  (0, _inherits3.default)(LineChart, _React$Component);\n  (0, _createClass3.default)(LineChart, null, [{\n    key: 'propTypes',\n    get: function get() {\n      return {\n        data: _propTypes2.default.array.isRequired,\n        width: _propTypes2.default.number,\n        height: _propTypes2.default.number,\n        xType: _propTypes2.default.string,\n        yType: _propTypes2.default.string,\n        datePattern: _propTypes2.default.string,\n        interpolate: _propTypes2.default.string,\n        style: _propTypes2.default.object,\n        margin: _propTypes2.default.object,\n        axes: _propTypes2.default.bool,\n        grid: _propTypes2.default.bool,\n        verticalGrid: _propTypes2.default.bool,\n        xDomainRange: _propTypes2.default.array,\n        yDomainRange: _propTypes2.default.array,\n        tickTimeDisplayFormat: _propTypes2.default.string,\n        yTicks: _propTypes2.default.number,\n        xTicks: _propTypes2.default.number,\n        dataPoints: _propTypes2.default.bool,\n        lineColors: _propTypes2.default.array,\n        axisLabels: _propTypes2.default.shape({\n          x: _propTypes2.default.string,\n          y: _propTypes2.default.string\n        }),\n        yAxisOrientRight: _propTypes2.default.bool,\n        mouseOverHandler: _propTypes2.default.func,\n        mouseOutHandler: _propTypes2.default.func,\n        mouseMoveHandler: _propTypes2.default.func,\n        clickHandler: _propTypes2.default.func\n      };\n    }\n  }, {\n    key: 'defaultProps',\n    get: function get() {\n      return {\n        width: 200,\n        height: 150,\n        datePattern: '%d-%b-%y',\n        interpolate: 'linear',\n        axes: false,\n        xType: 'linear',\n        yType: 'linear',\n        lineColors: [],\n        axisLabels: {\n          x: '',\n          y: ''\n        },\n        mouseOverHandler: function mouseOverHandler() {},\n        mouseOutHandler: function mouseOutHandler() {},\n        mouseMoveHandler: function mouseMoveHandler() {},\n        clickHandler: function clickHandler() {}\n      };\n    }\n  }]);\n\n  function LineChart(props) {\n    (0, _classCallCheck3.default)(this, LineChart);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (LineChart.__proto__ || (0, _getPrototypeOf2.default)(LineChart)).call(this, props));\n\n    _this.uid = (0, _shared.createUniqueID)(props);\n    return _this;\n  }\n\n  (0, _createClass3.default)(LineChart, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var lineChart = this.refs.lineChart;\n      (0, _shared.createCircularTicks)(lineChart);\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      var lineChart = this.refs.lineChart;\n      (0, _shared.createCircularTicks)(lineChart);\n    }\n  }, {\n    key: 'createSvgNode',\n    value: function createSvgNode(_ref) {\n      var m = _ref.m,\n          w = _ref.w,\n          h = _ref.h;\n      var node = new _reactFauxDom2.default.Element('svg');\n      node.setAttribute('width', w + m.left + m.right);\n      node.setAttribute('height', h + m.top + m.bottom);\n      return node;\n    }\n  }, {\n    key: 'createSvgRoot',\n    value: function createSvgRoot(_ref2) {\n      var node = _ref2.node,\n          m = _ref2.m;\n      return (0, _d.select)(node).append('g').attr('transform', 'translate(' + m.left + ', ' + m.top + ')');\n    }\n  }, {\n    key: 'createXAxis',\n    value: function createXAxis(_ref3) {\n      var root = _ref3.root,\n          m = _ref3.m,\n          w = _ref3.w,\n          h = _ref3.h,\n          x = _ref3.x;\n      var _props = this.props,\n          xType = _props.xType,\n          label = _props.axisLabels.x,\n          xTicks = _props.xTicks,\n          grid = _props.grid,\n          verticalGrid = _props.verticalGrid,\n          tickTimeDisplayFormat = _props.tickTimeDisplayFormat,\n          yAxisOrientRight = _props.yAxisOrientRight;\n      var axis = (0, _d.axisBottom)(x);\n\n      if (xType === 'time' && tickTimeDisplayFormat) {\n        axis.tickFormat((0, _d.timeFormat)(tickTimeDisplayFormat));\n      }\n\n      if (grid && verticalGrid) {\n        axis.tickSize(-h, 6).tickPadding(15);\n      } else {\n        axis.tickSize(0).tickPadding(15);\n      }\n\n      if (xTicks) {\n        axis.ticks(xTicks);\n      }\n\n      var group = root.append('g').attr('class', 'x axis').attr('transform', 'translate(0, ' + h + ')');\n      group.call(axis);\n\n      if (label) {\n        group.append('text').attr('class', 'label').attr('y', m.bottom - 10).attr('x', yAxisOrientRight ? 0 : w).style('text-anchor', yAxisOrientRight ? 'start' : 'end').text(label);\n      }\n    }\n  }, {\n    key: 'createYAxis',\n    value: function createYAxis(_ref4) {\n      var root = _ref4.root,\n          m = _ref4.m,\n          w = _ref4.w,\n          y = _ref4.y;\n      var _props2 = this.props,\n          yType = _props2.yType,\n          label = _props2.axisLabels.y,\n          yTicks = _props2.yTicks,\n          grid = _props2.grid,\n          tickTimeDisplayFormat = _props2.tickTimeDisplayFormat,\n          yAxisOrientRight = _props2.yAxisOrientRight;\n      var axis = yAxisOrientRight ? (0, _d.axisRight)(y) : (0, _d.axisLeft)(y);\n\n      if (yType === 'time' && tickTimeDisplayFormat) {\n        axis.tickFormat((0, _d.timeFormat)(tickTimeDisplayFormat));\n      }\n\n      if (grid) {\n        axis.tickSize(-w, 6).tickPadding(12);\n      } else {\n        axis.tickPadding(10);\n      }\n\n      if (yTicks) {\n        axis.ticks(yTicks);\n      }\n\n      var group = root.append('g').attr('class', 'y axis').attr('transform', yAxisOrientRight ? 'translate(' + w + ', 0)' : 'translate(0, 0)');\n      group.call(axis);\n\n      if (label) {\n        group.append('text').attr('class', 'label').attr('transform', 'rotate(-90)').attr('x', 0).attr('y', yAxisOrientRight ? -20 + m.right : 0 - m.left).attr('dy', '.9em').style('text-anchor', 'end').text(label);\n      }\n    }\n  }, {\n    key: 'createLinePathChart',\n    value: function createLinePathChart(_ref5) {\n      var root = _ref5.root,\n          x = _ref5.x,\n          y = _ref5.y,\n          xValue = _ref5.xValue,\n          yValue = _ref5.yValue,\n          colors = _ref5.colors;\n      var _props3 = this.props,\n          data = _props3.data,\n          interpolate = _props3.interpolate;\n\n      var getStroke = function getStroke(d, i) {\n        return colors[i];\n      };\n\n      var linePath = (0, _d.line)().curve((0, _interpolate2.default)(interpolate)).x(function (d) {\n        return x(xValue(d));\n      }).y(function (d) {\n        return y(yValue(d));\n      });\n      var group = root.append('g').attr('class', 'lineChart');\n      group.selectAll('path').data(data).enter().append('path').attr('class', 'line').style('stroke', getStroke).attr('d', linePath);\n    }\n  }, {\n    key: 'createPoints',\n    value: function createPoints(_ref6) {\n      var _this2 = this;\n\n      var root = _ref6.root,\n          x = _ref6.x,\n          y = _ref6.y,\n          colors = _ref6.colors;\n      var _props4 = this.props,\n          data = _props4.data,\n          xType = _props4.xType,\n          yType = _props4.yType,\n          mouseOverHandler = _props4.mouseOverHandler,\n          mouseOutHandler = _props4.mouseOutHandler,\n          mouseMoveHandler = _props4.mouseMoveHandler,\n          clickHandler = _props4.clickHandler;\n      /*\n       * We don't really need to do this, but it\n       * avoids obscure \"this\" below\n       */\n\n      var calculateDate = function calculateDate(v) {\n        return _this2.parseDate(v);\n      };\n\n      var getStroke = function getStroke(d, i) {\n        return colors[i];\n      };\n      /*\n       * Creating the calculation functions\n       */\n\n\n      var calculateCX = function calculateCX(d) {\n        return xType === 'time' ? x(calculateDate(d.x)) : x(d.x);\n      };\n\n      var calculateCY = function calculateCY(d) {\n        return yType === 'time' ? y(calculateDate(d.y)) : y(d.y);\n      };\n\n      var mouseover = function mouseover(d) {\n        return mouseOverHandler(d, _d.event);\n      };\n\n      var mouseout = function mouseout(d) {\n        return mouseOutHandler(d, _d.event);\n      };\n\n      var mousemove = function mousemove(d) {\n        return mouseMoveHandler(d, _d.event);\n      };\n\n      var click = function click(d) {\n        return clickHandler(d, _d.event);\n      };\n\n      var group = root.append('g').attr('class', 'dataPoints');\n      data.forEach(function (item) {\n        item.forEach(function (d) {\n          /*\n           * Applying the calculation functions\n           */\n          group.datum(d).append('circle').attr('class', 'data-point').style('strokeWidth', '2px').style('stroke', getStroke).style('fill', 'white').attr('cx', calculateCX).attr('cy', calculateCY).on('mouseover', mouseover).on('mouseout', mouseout).on('mousemove', mousemove).on('click', click);\n        });\n      });\n    }\n  }, {\n    key: 'createStyle',\n    value: function createStyle() {\n      var _props5 = this.props,\n          style = _props5.style,\n          grid = _props5.grid,\n          verticalGrid = _props5.verticalGrid,\n          yAxisOrientRight = _props5.yAxisOrientRight;\n      var uid = this.uid;\n      var scope = '.line-chart-' + uid;\n      var axisStyles = (0, _shared.getAxisStyles)(grid, verticalGrid, yAxisOrientRight);\n      var rules = (0, _lodash2.default)({}, _shared.defaultStyles, style, axisStyles);\n      return _react2.default.createElement(_radium.Style, {\n        scopeSelector: scope,\n        rules: rules\n      });\n    }\n  }, {\n    key: 'parseDate',\n    value: function parseDate(v) {\n      var datePattern = this.props.datePattern;\n      var datePatternParser = dateParser[datePattern] || (dateParser[datePattern] = (0, _d3TimeFormat.timeParse)(datePattern));\n      return datePatternParser(v);\n    }\n  }, {\n    key: 'calculateChartParameters',\n    value: function calculateChartParameters() {\n      var _this3 = this;\n\n      var _props6 = this.props,\n          data = _props6.data,\n          axes = _props6.axes,\n          xType = _props6.xType,\n          yType = _props6.yType,\n          xDomainRange = _props6.xDomainRange,\n          yDomainRange = _props6.yDomainRange,\n          margin = _props6.margin,\n          width = _props6.width,\n          height = _props6.height,\n          lineColors = _props6.lineColors,\n          yAxisOrientRight = _props6.yAxisOrientRight;\n      /*\n       * We could \"bind\"!\n       */\n\n      var parseDate = function parseDate(v) {\n        return _this3.parseDate(v);\n      };\n      /*\n       * 'w' and 'h' are the width and height of the graph canvas\n       * (excluding axes and other furniture)\n       */\n\n\n      var m = (0, _shared.calculateMargin)(axes, margin, yAxisOrientRight);\n      var w = (0, _shared.reduce)(width, m.left, m.right);\n      var h = (0, _shared.reduce)(height, m.top, m.bottom);\n      var x = (0, _shared.createDomainRangeGenerator)('x', xDomainRange, data, xType, w, parseDate);\n      var y = (0, _shared.createDomainRangeGenerator)('y', yDomainRange, data, yType, h, parseDate);\n      var xValue = (0, _shared.createValueGenerator)('x', xType, parseDate);\n      var yValue = (0, _shared.createValueGenerator)('y', yType, parseDate);\n      var colors = lineColors.concat(_shared.defaultColors);\n      var node = this.createSvgNode({\n        m: m,\n        w: w,\n        h: h\n      });\n      var root = this.createSvgRoot({\n        node: node,\n        m: m\n      });\n      return {\n        m: m,\n        w: w,\n        h: h,\n        x: x,\n        y: y,\n        xValue: xValue,\n        yValue: yValue,\n        colors: colors,\n        node: node,\n        root: root\n      };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props7 = this.props,\n          axes = _props7.axes,\n          dataPoints = _props7.dataPoints;\n      var p = this.calculateChartParameters();\n\n      if (axes) {\n        this.createXAxis(p);\n        this.createYAxis(p);\n      }\n\n      this.createLinePathChart(p);\n\n      if (dataPoints) {\n        this.createPoints(p);\n      }\n\n      var uid = this.uid;\n      var className = 'line-chart-' + uid;\n      var node = p.node;\n      return _react2.default.createElement('div', {\n        ref: 'lineChart',\n        className: className\n      }, this.createStyle(), node.toReact());\n    }\n  }]);\n  return LineChart;\n}(_react2.default.Component);\n\nexports.default = LineChart;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}