{"ast":null,"code":"/*\n  Generated by kison.*/\nvar parser = function (undefined) {\n  /*jshint quotmark:false, loopfunc:true, indent:false, unused:false, asi:true, boss:true*/\n\n  /* Generated by kison */\n  var parser = {},\n      GrammarConst = {\n    'SHIFT_TYPE': 1,\n    'REDUCE_TYPE': 2,\n    'ACCEPT_TYPE': 0,\n    'TYPE_INDEX': 0,\n    'PRODUCTION_INDEX': 1,\n    'TO_INDEX': 2\n  };\n  /*jslint quotmark: false*/\n\n  function mix(to, from) {\n    for (var f in from) {\n      to[f] = from[f];\n    }\n  }\n\n  function isArray(obj) {\n    return '[object Array]' === Object.prototype.toString.call(obj);\n  }\n\n  function each(object, fn, context) {\n    if (object) {\n      var key,\n          val,\n          length,\n          i = 0;\n      context = context || null;\n\n      if (!isArray(object)) {\n        for (key in object) {\n          // can not use hasOwnProperty\n          if (fn.call(context, object[key], key, object) === false) {\n            break;\n          }\n        }\n      } else {\n        length = object.length;\n\n        for (val = object[0]; i < length; val = object[++i]) {\n          if (fn.call(context, val, i, object) === false) {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  function inArray(item, arr) {\n    for (var i = 0, l = arr.length; i < l; i++) {\n      if (arr[i] === item) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  var Lexer = function Lexer(cfg) {\n    var self = this;\n    /*\n    lex rules.\n    @type {Object[]}\n    @example\n    [\n    {\n    regexp:'\\\\w+',\n    state:['xx'],\n    token:'c',\n    // this => lex\n    action:function(){}\n    }\n    ]\n    */\n\n    self.rules = [];\n    mix(self, cfg);\n    /*\n    Input languages\n    @type {String}\n    */\n\n    self.resetInput(self.input);\n  };\n\n  Lexer.prototype = {\n    'resetInput': function resetInput(input) {\n      mix(this, {\n        input: input,\n        matched: '',\n        stateStack: [Lexer.STATIC.INITIAL],\n        match: '',\n        text: '',\n        firstLine: 1,\n        lineNumber: 1,\n        lastLine: 1,\n        firstColumn: 1,\n        lastColumn: 1\n      });\n    },\n    'getCurrentRules': function getCurrentRules() {\n      var self = this,\n          currentState = self.stateStack[self.stateStack.length - 1],\n          rules = []; //#JSCOVERAGE_IF\n\n      if (self.mapState) {\n        currentState = self.mapState(currentState);\n      }\n\n      each(self.rules, function (r) {\n        var state = r.state || r[3];\n\n        if (!state) {\n          if (currentState === Lexer.STATIC.INITIAL) {\n            rules.push(r);\n          }\n        } else if (inArray(currentState, state)) {\n          rules.push(r);\n        }\n      });\n      return rules;\n    },\n    'pushState': function pushState(state) {\n      this.stateStack.push(state);\n    },\n    'popState': function popState(num) {\n      num = num || 1;\n      var ret;\n\n      while (num--) {\n        ret = this.stateStack.pop();\n      }\n\n      return ret;\n    },\n    'showDebugInfo': function showDebugInfo() {\n      var self = this,\n          DEBUG_CONTEXT_LIMIT = Lexer.STATIC.DEBUG_CONTEXT_LIMIT,\n          matched = self.matched,\n          match = self.match,\n          input = self.input;\n      matched = matched.slice(0, matched.length - match.length); //#JSCOVERAGE_IF 0\n\n      var past = (matched.length > DEBUG_CONTEXT_LIMIT ? '...' : '') + matched.slice(0 - DEBUG_CONTEXT_LIMIT).replace(/\\n/, ' '),\n          next = match + input; //#JSCOVERAGE_ENDIF\n\n      next = next.slice(0, DEBUG_CONTEXT_LIMIT) + (next.length > DEBUG_CONTEXT_LIMIT ? '...' : '');\n      return past + next + '\\n' + new Array(past.length + 1).join('-') + '^';\n    },\n    'mapSymbol': function mapSymbolForCodeGen(t) {\n      return this.symbolMap[t];\n    },\n    'mapReverseSymbol': function mapReverseSymbol(rs) {\n      var self = this,\n          symbolMap = self.symbolMap,\n          i,\n          reverseSymbolMap = self.reverseSymbolMap;\n\n      if (!reverseSymbolMap && symbolMap) {\n        reverseSymbolMap = self.reverseSymbolMap = {};\n\n        for (i in symbolMap) {\n          reverseSymbolMap[symbolMap[i]] = i;\n        }\n      } //#JSCOVERAGE_IF\n\n\n      if (reverseSymbolMap) {\n        return reverseSymbolMap[rs];\n      } else {\n        return rs;\n      }\n    },\n    'lex': function lex() {\n      var self = this,\n          input = self.input,\n          i,\n          rule,\n          m,\n          ret,\n          lines,\n          rules = self.getCurrentRules();\n      self.match = self.text = '';\n\n      if (!input) {\n        return self.mapSymbol(Lexer.STATIC.END_TAG);\n      }\n\n      for (i = 0; i < rules.length; i++) {\n        rule = rules[i]; //#JSCOVERAGE_IF 0\n\n        var regexp = rule.regexp || rule[1],\n            token = rule.token || rule[0],\n            action = rule.action || rule[2] || undefined; //#JSCOVERAGE_ENDIF\n\n        if (m = input.match(regexp)) {\n          lines = m[0].match(/\\n.*/g);\n\n          if (lines) {\n            self.lineNumber += lines.length;\n          }\n\n          mix(self, {\n            firstLine: self.lastLine,\n            lastLine: self.lineNumber + 1,\n            firstColumn: self.lastColumn,\n            lastColumn: lines ? lines[lines.length - 1].length - 1 : self.lastColumn + m[0].length\n          });\n          var match; // for error report\n\n          match = self.match = m[0]; // all matches\n\n          self.matches = m; // may change by user\n\n          self.text = match; // matched content utils now\n\n          self.matched += match;\n          ret = action && action.call(self);\n\n          if (ret === undefined) {\n            ret = token;\n          } else {\n            ret = self.mapSymbol(ret);\n          }\n\n          input = input.slice(match.length);\n          self.input = input;\n\n          if (ret) {\n            return ret;\n          } else {\n            // ignore\n            return self.lex();\n          }\n        }\n      }\n    }\n  };\n  Lexer.STATIC = {\n    'INITIAL': 'I',\n    'DEBUG_CONTEXT_LIMIT': 20,\n    'END_TAG': '$EOF'\n  };\n  var lexer = new Lexer({\n    'rules': [['b', /^\\[(?:[\\t\\r\\n\\f\\x20]*)/, function () {\n      this.text = this.yy.trim(this.text);\n    }], ['c', /^(?:[\\t\\r\\n\\f\\x20]*)\\]/, function () {\n      this.text = this.yy.trim(this.text);\n    }], ['d', /^(?:[\\t\\r\\n\\f\\x20]*)~=(?:[\\t\\r\\n\\f\\x20]*)/, function () {\n      this.text = this.yy.trim(this.text);\n    }], ['e', /^(?:[\\t\\r\\n\\f\\x20]*)\\|=(?:[\\t\\r\\n\\f\\x20]*)/, function () {\n      this.text = this.yy.trim(this.text);\n    }], ['f', /^(?:[\\t\\r\\n\\f\\x20]*)\\^=(?:[\\t\\r\\n\\f\\x20]*)/, function () {\n      this.text = this.yy.trim(this.text);\n    }], ['g', /^(?:[\\t\\r\\n\\f\\x20]*)\\$=(?:[\\t\\r\\n\\f\\x20]*)/, function () {\n      this.text = this.yy.trim(this.text);\n    }], ['h', /^(?:[\\t\\r\\n\\f\\x20]*)\\*=(?:[\\t\\r\\n\\f\\x20]*)/, function () {\n      this.text = this.yy.trim(this.text);\n    }], ['i', /^(?:[\\t\\r\\n\\f\\x20]*)\\=(?:[\\t\\r\\n\\f\\x20]*)/, function () {\n      this.text = this.yy.trim(this.text);\n    }], ['j', /^(?:(?:[\\w]|[^\\x00-\\xa0]|(?:\\\\[^\\n\\r\\f0-9a-f]))(?:[\\w\\d-]|[^\\x00-\\xa0]|(?:\\\\[^\\n\\r\\f0-9a-f]))*)\\(/, function () {\n      this.text = this.yy.trim(this.text).slice(0, -1);\n      this.pushState('fn');\n    }], ['k', /^[^\\)]*/, function () {\n      this.popState();\n    }, ['fn']], ['l', /^(?:[\\t\\r\\n\\f\\x20]*)\\)/, function () {\n      this.text = this.yy.trim(this.text);\n    }], ['m', /^:not\\((?:[\\t\\r\\n\\f\\x20]*)/i, function () {\n      this.text = this.yy.trim(this.text);\n    }], ['n', /^(?:(?:[\\w]|[^\\x00-\\xa0]|(?:\\\\[^\\n\\r\\f0-9a-f]))(?:[\\w\\d-]|[^\\x00-\\xa0]|(?:\\\\[^\\n\\r\\f0-9a-f]))*)/, function () {\n      this.text = this.yy.unEscape(this.text);\n    }], ['o', /^\"(\\\\\"|[^\"])*\"/, function () {\n      this.text = this.yy.unEscapeStr(this.text);\n    }], ['o', /^'(\\\\'|[^'])*'/, function () {\n      this.text = this.yy.unEscapeStr(this.text);\n    }], ['p', /^#(?:(?:[\\w\\d-]|[^\\x00-\\xa0]|(?:\\\\[^\\n\\r\\f0-9a-f]))+)/, function () {\n      this.text = this.yy.unEscape(this.text.slice(1));\n    }], ['q', /^\\.(?:(?:[\\w]|[^\\x00-\\xa0]|(?:\\\\[^\\n\\r\\f0-9a-f]))(?:[\\w\\d-]|[^\\x00-\\xa0]|(?:\\\\[^\\n\\r\\f0-9a-f]))*)/, function () {\n      this.text = this.yy.unEscape(this.text.slice(1));\n    }], ['r', /^(?:[\\t\\r\\n\\f\\x20]*),(?:[\\t\\r\\n\\f\\x20]*)/, function () {\n      this.text = this.yy.trim(this.text);\n    }], ['s', /^::?/, 0], ['t', /^(?:[\\t\\r\\n\\f\\x20]*)\\+(?:[\\t\\r\\n\\f\\x20]*)/, function () {\n      this.text = this.yy.trim(this.text);\n    }], ['u', /^(?:[\\t\\r\\n\\f\\x20]*)>(?:[\\t\\r\\n\\f\\x20]*)/, function () {\n      this.text = this.yy.trim(this.text);\n    }], ['v', /^(?:[\\t\\r\\n\\f\\x20]*)~(?:[\\t\\r\\n\\f\\x20]*)/, function () {\n      this.text = this.yy.trim(this.text);\n    }], ['w', /^\\*/, 0], ['x', /^(?:[\\t\\r\\n\\f\\x20]+)/, 0], ['y', /^./, 0]]\n  });\n  parser.lexer = lexer;\n  lexer.symbolMap = {\n    '$EOF': 'a',\n    'LEFT_BRACKET': 'b',\n    'RIGHT_BRACKET': 'c',\n    'INCLUDES': 'd',\n    'DASH_MATCH': 'e',\n    'PREFIX_MATCH': 'f',\n    'SUFFIX_MATCH': 'g',\n    'SUBSTRING_MATCH': 'h',\n    'ALL_MATCH': 'i',\n    'FUNCTION': 'j',\n    'PARAMETER': 'k',\n    'RIGHT_PARENTHESES': 'l',\n    'NOT': 'm',\n    'IDENT': 'n',\n    'STRING': 'o',\n    'HASH': 'p',\n    'CLASS': 'q',\n    'COMMA': 'r',\n    'COLON': 's',\n    'PLUS': 't',\n    'GREATER': 'u',\n    'TILDE': 'v',\n    'UNIVERSAL': 'w',\n    'S': 'x',\n    'INVALID': 'y',\n    '$START': 'z',\n    'selectors_group': 'aa',\n    'selector': 'ab',\n    'simple_selector_sequence': 'ac',\n    'combinator': 'ad',\n    'type_selector': 'ae',\n    'id_selector': 'af',\n    'class_selector': 'ag',\n    'attrib_match': 'ah',\n    'attrib': 'ai',\n    'attrib_val': 'aj',\n    'pseudo': 'ak',\n    'negation': 'al',\n    'negation_arg': 'am',\n    'suffix_selector': 'an',\n    'suffix_selectors': 'ao'\n  };\n  parser.productions = [['z', ['aa']], ['aa', ['ab'], function () {\n    return [this.$1];\n  }], ['aa', ['aa', 'r', 'ab'], function () {\n    this.$1.push(this.$3);\n  }], ['ab', ['ac']], ['ab', ['ab', 'ad', 'ac'], function () {\n    // LinkedList\n    this.$1.nextCombinator = this.$3.prevCombinator = this.$2;\n    var order;\n    order = this.$1.order = this.$1.order || 0;\n    this.$3.order = order + 1;\n    this.$3.prev = this.$1;\n    this.$1.next = this.$3;\n    return this.$3;\n  }], ['ad', ['t']], ['ad', ['u']], ['ad', ['v']], ['ad', ['x'], function () {\n    return ' ';\n  }], ['ae', ['n'], function () {\n    return {\n      t: 'tag',\n      value: this.$1\n    };\n  }], ['ae', ['w'], function () {\n    return {\n      t: 'tag',\n      value: this.$1\n    };\n  }], ['af', ['p'], function () {\n    return {\n      t: 'id',\n      value: this.$1\n    };\n  }], ['ag', ['q'], function () {\n    return {\n      t: 'cls',\n      value: this.$1\n    };\n  }], ['ah', ['f']], ['ah', ['g']], ['ah', ['h']], ['ah', ['i']], ['ah', ['d']], ['ah', ['e']], ['ai', ['b', 'n', 'c'], function () {\n    return {\n      t: 'attrib',\n      value: {\n        ident: this.$2\n      }\n    };\n  }], ['aj', ['n']], ['aj', ['o']], ['ai', ['b', 'n', 'ah', 'aj', 'c'], function () {\n    return {\n      t: 'attrib',\n      value: {\n        ident: this.$2,\n        match: this.$3,\n        value: this.$4\n      }\n    };\n  }], ['ak', ['s', 'j', 'k', 'l'], function () {\n    return {\n      t: 'pseudo',\n      value: {\n        fn: this.$2.toLowerCase(),\n        param: this.$3\n      }\n    };\n  }], ['ak', ['s', 'n'], function () {\n    return {\n      t: 'pseudo',\n      value: {\n        ident: this.$2.toLowerCase()\n      }\n    };\n  }], ['al', ['m', 'am', 'l'], function () {\n    return {\n      t: 'pseudo',\n      value: {\n        fn: 'not',\n        param: this.$2\n      }\n    };\n  }], ['am', ['ae']], ['am', ['af']], ['am', ['ag']], ['am', ['ai']], ['am', ['ak']], ['an', ['af']], ['an', ['ag']], ['an', ['ai']], ['an', ['ak']], ['an', ['al']], ['ao', ['an'], function () {\n    return [this.$1];\n  }], ['ao', ['ao', 'an'], function () {\n    this.$1.push(this.$2);\n  }], ['ac', ['ae']], ['ac', ['ao'], function () {\n    return {\n      suffix: this.$1\n    };\n  }], ['ac', ['ae', 'ao'], function () {\n    return {\n      t: 'tag',\n      value: this.$1.value,\n      suffix: this.$2\n    };\n  }]];\n  parser.table = {\n    'gotos': {\n      '0': {\n        'aa': 8,\n        'ab': 9,\n        'ae': 10,\n        'af': 11,\n        'ag': 12,\n        'ai': 13,\n        'ak': 14,\n        'al': 15,\n        'an': 16,\n        'ao': 17,\n        'ac': 18\n      },\n      '2': {\n        'ae': 20,\n        'af': 21,\n        'ag': 22,\n        'ai': 23,\n        'ak': 24,\n        'am': 25\n      },\n      '9': {\n        'ad': 33\n      },\n      '10': {\n        'af': 11,\n        'ag': 12,\n        'ai': 13,\n        'ak': 14,\n        'al': 15,\n        'an': 16,\n        'ao': 34\n      },\n      '17': {\n        'af': 11,\n        'ag': 12,\n        'ai': 13,\n        'ak': 14,\n        'al': 15,\n        'an': 35\n      },\n      '19': {\n        'ah': 43\n      },\n      '28': {\n        'ab': 46,\n        'ae': 10,\n        'af': 11,\n        'ag': 12,\n        'ai': 13,\n        'ak': 14,\n        'al': 15,\n        'an': 16,\n        'ao': 17,\n        'ac': 18\n      },\n      '33': {\n        'ae': 10,\n        'af': 11,\n        'ag': 12,\n        'ai': 13,\n        'ak': 14,\n        'al': 15,\n        'an': 16,\n        'ao': 17,\n        'ac': 47\n      },\n      '34': {\n        'af': 11,\n        'ag': 12,\n        'ai': 13,\n        'ak': 14,\n        'al': 15,\n        'an': 35\n      },\n      '43': {\n        'aj': 50\n      },\n      '46': {\n        'ad': 33\n      }\n    },\n    'action': {\n      '0': {\n        'b': [1, undefined, 1],\n        'm': [1, undefined, 2],\n        'n': [1, undefined, 3],\n        'p': [1, undefined, 4],\n        'q': [1, undefined, 5],\n        's': [1, undefined, 6],\n        'w': [1, undefined, 7]\n      },\n      '1': {\n        'n': [1, undefined, 19]\n      },\n      '2': {\n        'b': [1, undefined, 1],\n        'n': [1, undefined, 3],\n        'p': [1, undefined, 4],\n        'q': [1, undefined, 5],\n        's': [1, undefined, 6],\n        'w': [1, undefined, 7]\n      },\n      '3': {\n        'a': [2, 9],\n        'r': [2, 9],\n        't': [2, 9],\n        'u': [2, 9],\n        'v': [2, 9],\n        'x': [2, 9],\n        'p': [2, 9],\n        'q': [2, 9],\n        'b': [2, 9],\n        's': [2, 9],\n        'm': [2, 9],\n        'l': [2, 9]\n      },\n      '4': {\n        'a': [2, 11],\n        'r': [2, 11],\n        't': [2, 11],\n        'u': [2, 11],\n        'v': [2, 11],\n        'x': [2, 11],\n        'p': [2, 11],\n        'q': [2, 11],\n        'b': [2, 11],\n        's': [2, 11],\n        'm': [2, 11],\n        'l': [2, 11]\n      },\n      '5': {\n        'a': [2, 12],\n        'r': [2, 12],\n        't': [2, 12],\n        'u': [2, 12],\n        'v': [2, 12],\n        'x': [2, 12],\n        'p': [2, 12],\n        'q': [2, 12],\n        'b': [2, 12],\n        's': [2, 12],\n        'm': [2, 12],\n        'l': [2, 12]\n      },\n      '6': {\n        'j': [1, undefined, 26],\n        'n': [1, undefined, 27]\n      },\n      '7': {\n        'a': [2, 10],\n        'r': [2, 10],\n        't': [2, 10],\n        'u': [2, 10],\n        'v': [2, 10],\n        'x': [2, 10],\n        'p': [2, 10],\n        'q': [2, 10],\n        'b': [2, 10],\n        's': [2, 10],\n        'm': [2, 10],\n        'l': [2, 10]\n      },\n      '8': {\n        'a': [0],\n        'r': [1, undefined, 28]\n      },\n      '9': {\n        'a': [2, 1],\n        'r': [2, 1],\n        't': [1, undefined, 29],\n        'u': [1, undefined, 30],\n        'v': [1, undefined, 31],\n        'x': [1, undefined, 32]\n      },\n      '10': {\n        'a': [2, 38],\n        'r': [2, 38],\n        't': [2, 38],\n        'u': [2, 38],\n        'v': [2, 38],\n        'x': [2, 38],\n        'b': [1, undefined, 1],\n        'm': [1, undefined, 2],\n        'p': [1, undefined, 4],\n        'q': [1, undefined, 5],\n        's': [1, undefined, 6]\n      },\n      '11': {\n        'a': [2, 31],\n        'r': [2, 31],\n        't': [2, 31],\n        'u': [2, 31],\n        'v': [2, 31],\n        'x': [2, 31],\n        'p': [2, 31],\n        'q': [2, 31],\n        'b': [2, 31],\n        's': [2, 31],\n        'm': [2, 31]\n      },\n      '12': {\n        'a': [2, 32],\n        'r': [2, 32],\n        't': [2, 32],\n        'u': [2, 32],\n        'v': [2, 32],\n        'x': [2, 32],\n        'p': [2, 32],\n        'q': [2, 32],\n        'b': [2, 32],\n        's': [2, 32],\n        'm': [2, 32]\n      },\n      '13': {\n        'a': [2, 33],\n        'r': [2, 33],\n        't': [2, 33],\n        'u': [2, 33],\n        'v': [2, 33],\n        'x': [2, 33],\n        'p': [2, 33],\n        'q': [2, 33],\n        'b': [2, 33],\n        's': [2, 33],\n        'm': [2, 33]\n      },\n      '14': {\n        'a': [2, 34],\n        'r': [2, 34],\n        't': [2, 34],\n        'u': [2, 34],\n        'v': [2, 34],\n        'x': [2, 34],\n        'p': [2, 34],\n        'q': [2, 34],\n        'b': [2, 34],\n        's': [2, 34],\n        'm': [2, 34]\n      },\n      '15': {\n        'a': [2, 35],\n        'r': [2, 35],\n        't': [2, 35],\n        'u': [2, 35],\n        'v': [2, 35],\n        'x': [2, 35],\n        'p': [2, 35],\n        'q': [2, 35],\n        'b': [2, 35],\n        's': [2, 35],\n        'm': [2, 35]\n      },\n      '16': {\n        'a': [2, 36],\n        'r': [2, 36],\n        't': [2, 36],\n        'u': [2, 36],\n        'v': [2, 36],\n        'x': [2, 36],\n        'p': [2, 36],\n        'q': [2, 36],\n        'b': [2, 36],\n        's': [2, 36],\n        'm': [2, 36]\n      },\n      '17': {\n        'a': [2, 39],\n        'r': [2, 39],\n        't': [2, 39],\n        'u': [2, 39],\n        'v': [2, 39],\n        'x': [2, 39],\n        'b': [1, undefined, 1],\n        'm': [1, undefined, 2],\n        'p': [1, undefined, 4],\n        'q': [1, undefined, 5],\n        's': [1, undefined, 6]\n      },\n      '18': {\n        'a': [2, 3],\n        'r': [2, 3],\n        't': [2, 3],\n        'u': [2, 3],\n        'v': [2, 3],\n        'x': [2, 3]\n      },\n      '19': {\n        'c': [1, undefined, 36],\n        'd': [1, undefined, 37],\n        'e': [1, undefined, 38],\n        'f': [1, undefined, 39],\n        'g': [1, undefined, 40],\n        'h': [1, undefined, 41],\n        'i': [1, undefined, 42]\n      },\n      '20': {\n        'l': [2, 26]\n      },\n      '21': {\n        'l': [2, 27]\n      },\n      '22': {\n        'l': [2, 28]\n      },\n      '23': {\n        'l': [2, 29]\n      },\n      '24': {\n        'l': [2, 30]\n      },\n      '25': {\n        'l': [1, undefined, 44]\n      },\n      '26': {\n        'k': [1, undefined, 45]\n      },\n      '27': {\n        'a': [2, 24],\n        'r': [2, 24],\n        't': [2, 24],\n        'u': [2, 24],\n        'v': [2, 24],\n        'x': [2, 24],\n        'p': [2, 24],\n        'q': [2, 24],\n        'b': [2, 24],\n        's': [2, 24],\n        'm': [2, 24],\n        'l': [2, 24]\n      },\n      '28': {\n        'b': [1, undefined, 1],\n        'm': [1, undefined, 2],\n        'n': [1, undefined, 3],\n        'p': [1, undefined, 4],\n        'q': [1, undefined, 5],\n        's': [1, undefined, 6],\n        'w': [1, undefined, 7]\n      },\n      '29': {\n        'n': [2, 5],\n        'w': [2, 5],\n        'p': [2, 5],\n        'q': [2, 5],\n        'b': [2, 5],\n        's': [2, 5],\n        'm': [2, 5]\n      },\n      '30': {\n        'n': [2, 6],\n        'w': [2, 6],\n        'p': [2, 6],\n        'q': [2, 6],\n        'b': [2, 6],\n        's': [2, 6],\n        'm': [2, 6]\n      },\n      '31': {\n        'n': [2, 7],\n        'w': [2, 7],\n        'p': [2, 7],\n        'q': [2, 7],\n        'b': [2, 7],\n        's': [2, 7],\n        'm': [2, 7]\n      },\n      '32': {\n        'n': [2, 8],\n        'w': [2, 8],\n        'p': [2, 8],\n        'q': [2, 8],\n        'b': [2, 8],\n        's': [2, 8],\n        'm': [2, 8]\n      },\n      '33': {\n        'b': [1, undefined, 1],\n        'm': [1, undefined, 2],\n        'n': [1, undefined, 3],\n        'p': [1, undefined, 4],\n        'q': [1, undefined, 5],\n        's': [1, undefined, 6],\n        'w': [1, undefined, 7]\n      },\n      '34': {\n        'a': [2, 40],\n        'r': [2, 40],\n        't': [2, 40],\n        'u': [2, 40],\n        'v': [2, 40],\n        'x': [2, 40],\n        'b': [1, undefined, 1],\n        'm': [1, undefined, 2],\n        'p': [1, undefined, 4],\n        'q': [1, undefined, 5],\n        's': [1, undefined, 6]\n      },\n      '35': {\n        'a': [2, 37],\n        'r': [2, 37],\n        't': [2, 37],\n        'u': [2, 37],\n        'v': [2, 37],\n        'x': [2, 37],\n        'p': [2, 37],\n        'q': [2, 37],\n        'b': [2, 37],\n        's': [2, 37],\n        'm': [2, 37]\n      },\n      '36': {\n        'a': [2, 19],\n        'r': [2, 19],\n        't': [2, 19],\n        'u': [2, 19],\n        'v': [2, 19],\n        'x': [2, 19],\n        'p': [2, 19],\n        'q': [2, 19],\n        'b': [2, 19],\n        's': [2, 19],\n        'm': [2, 19],\n        'l': [2, 19]\n      },\n      '37': {\n        'n': [2, 17],\n        'o': [2, 17]\n      },\n      '38': {\n        'n': [2, 18],\n        'o': [2, 18]\n      },\n      '39': {\n        'n': [2, 13],\n        'o': [2, 13]\n      },\n      '40': {\n        'n': [2, 14],\n        'o': [2, 14]\n      },\n      '41': {\n        'n': [2, 15],\n        'o': [2, 15]\n      },\n      '42': {\n        'n': [2, 16],\n        'o': [2, 16]\n      },\n      '43': {\n        'n': [1, undefined, 48],\n        'o': [1, undefined, 49]\n      },\n      '44': {\n        'a': [2, 25],\n        'r': [2, 25],\n        't': [2, 25],\n        'u': [2, 25],\n        'v': [2, 25],\n        'x': [2, 25],\n        'p': [2, 25],\n        'q': [2, 25],\n        'b': [2, 25],\n        's': [2, 25],\n        'm': [2, 25]\n      },\n      '45': {\n        'l': [1, undefined, 51]\n      },\n      '46': {\n        'a': [2, 2],\n        'r': [2, 2],\n        't': [1, undefined, 29],\n        'u': [1, undefined, 30],\n        'v': [1, undefined, 31],\n        'x': [1, undefined, 32]\n      },\n      '47': {\n        'a': [2, 4],\n        'r': [2, 4],\n        't': [2, 4],\n        'u': [2, 4],\n        'v': [2, 4],\n        'x': [2, 4]\n      },\n      '48': {\n        'c': [2, 20]\n      },\n      '49': {\n        'c': [2, 21]\n      },\n      '50': {\n        'c': [1, undefined, 52]\n      },\n      '51': {\n        'a': [2, 23],\n        'r': [2, 23],\n        't': [2, 23],\n        'u': [2, 23],\n        'v': [2, 23],\n        'x': [2, 23],\n        'p': [2, 23],\n        'q': [2, 23],\n        'b': [2, 23],\n        's': [2, 23],\n        'm': [2, 23],\n        'l': [2, 23]\n      },\n      '52': {\n        'a': [2, 22],\n        'r': [2, 22],\n        't': [2, 22],\n        'u': [2, 22],\n        'v': [2, 22],\n        'x': [2, 22],\n        'p': [2, 22],\n        'q': [2, 22],\n        'b': [2, 22],\n        's': [2, 22],\n        'm': [2, 22],\n        'l': [2, 22]\n      }\n    }\n  };\n\n  parser.parse = function parse(input, filename) {\n    var self = this,\n        lexer = self.lexer,\n        state,\n        symbol,\n        action,\n        table = self.table,\n        gotos = table.gotos,\n        tableAction = table.action,\n        productions = self.productions,\n        valueStack = [null],\n        // for debug info\n    prefix = filename ? 'in file: ' + filename + ' ' : '',\n        stack = [0];\n    lexer.resetInput(input);\n\n    while (1) {\n      // retrieve state number from top of stack\n      state = stack[stack.length - 1];\n\n      if (!symbol) {\n        symbol = lexer.lex();\n      }\n\n      if (symbol) {\n        // read action for current state and first input\n        action = tableAction[state] && tableAction[state][symbol];\n      } else {\n        action = null;\n      }\n\n      if (!action) {\n        var expected = [],\n            error; //#JSCOVERAGE_IF\n\n        if (tableAction[state]) {\n          for (var symbolForState in tableAction[state]) {\n            expected.push(self.lexer.mapReverseSymbol(symbolForState));\n          }\n        }\n\n        error = prefix + 'syntax error at line ' + lexer.lineNumber + ':\\n' + lexer.showDebugInfo() + '\\n' + 'expect ' + expected.join(', ');\n        throw new Error(error);\n      }\n\n      switch (action[GrammarConst.TYPE_INDEX]) {\n        case GrammarConst.SHIFT_TYPE:\n          stack.push(symbol);\n          valueStack.push(lexer.text); // push state\n\n          stack.push(action[GrammarConst.TO_INDEX]); // allow to read more\n\n          symbol = null;\n          break;\n\n        case GrammarConst.REDUCE_TYPE:\n          var production = productions[action[GrammarConst.PRODUCTION_INDEX]],\n              reducedSymbol = production.symbol || production[0],\n              reducedAction = production.action || production[2],\n              reducedRhs = production.rhs || production[1],\n              len = reducedRhs.length,\n              i = 0,\n              ret,\n              $$ = valueStack[valueStack.length - len]; // default to $$ = $1\n\n          ret = undefined;\n          self.$$ = $$;\n\n          for (; i < len; i++) {\n            self['$' + (len - i)] = valueStack[valueStack.length - 1 - i];\n          }\n\n          if (reducedAction) {\n            ret = reducedAction.call(self);\n          }\n\n          if (ret !== undefined) {\n            $$ = ret;\n          } else {\n            $$ = self.$$;\n          }\n\n          stack = stack.slice(0, -1 * len * 2);\n          valueStack = valueStack.slice(0, -1 * len);\n          stack.push(reducedSymbol);\n          valueStack.push($$);\n          var newState = gotos[stack[stack.length - 2]][stack[stack.length - 1]];\n          stack.push(newState);\n          break;\n\n        case GrammarConst.ACCEPT_TYPE:\n          return $$;\n      }\n    }\n  };\n\n  return parser;\n}();\n\nif (typeof module !== 'undefined') {\n  module.exports = parser;\n}","map":null,"metadata":{},"sourceType":"script"}