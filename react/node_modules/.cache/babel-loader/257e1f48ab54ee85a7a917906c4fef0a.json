{"ast":null,"code":"var React = require('react');\n\nvar createReactClass = require('create-react-class');\n\nvar mapValues = require('./utils/mapValues');\n\nfunction withFauxDOMFactory(Element) {\n  function withFauxDOM(WrappedComponent) {\n    var WithFauxDOM = createReactClass({\n      componentWillMount: function componentWillMount() {\n        this.connectedFauxDOM = {};\n        this.animateFauxDOMUntil = 0;\n      },\n      componentWillUnmount: function componentWillUnmount() {\n        this.stopAnimatingFauxDOM();\n        this.stopDrawFauxDOM();\n      },\n      connectFauxDOM: function connectFauxDOM(node, name, discardNode) {\n        if (!this.connectedFauxDOM[name] || discardNode) {\n          this.connectedFauxDOM[name] = typeof node !== 'string' ? node : new Element(node);\n          this.drawFauxDOMTimeout = setTimeout(this.drawFauxDOM);\n        }\n\n        return this.connectedFauxDOM[name];\n      },\n      drawFauxDOM: function drawFauxDOM() {\n        var virtualDOM = mapValues(this.connectedFauxDOM, function (n) {\n          return n.toReact();\n        });\n        this.setState(virtualDOM);\n      },\n      animateFauxDOM: function animateFauxDOM(duration) {\n        this.animateFauxDOMUntil = Math.max(Date.now() + duration, this.animateFauxDOMUntil);\n\n        if (!this.fauxDOMAnimationInterval) {\n          this.fauxDOMAnimationInterval = setInterval(function () {\n            if (Date.now() < this.animateFauxDOMUntil) {\n              this.drawFauxDOM();\n            } else {\n              this.stopAnimatingFauxDOM();\n            }\n          }.bind(this), 16);\n        }\n      },\n      stopAnimatingFauxDOM: function stopAnimatingFauxDOM() {\n        this.fauxDOMAnimationInterval = clearInterval(this.fauxDOMAnimationInterval);\n        this.animateFauxDOMUntil = 0;\n      },\n      stopDrawFauxDOM: function stopDrawFauxDOM() {\n        this.drawFauxDOMTimeout = clearTimeout(this.drawFauxDOMTimeout);\n      },\n      isAnimatingFauxDOM: function isAnimatingFauxDOM() {\n        return !!this.fauxDOMAnimationInterval;\n      },\n      render: function render() {\n        var props = Object.assign({}, this.props, this.state, {\n          connectFauxDOM: this.connectFauxDOM,\n          drawFauxDOM: this.drawFauxDOM,\n          animateFauxDOM: this.animateFauxDOM,\n          stopAnimatingFauxDOM: this.stopAnimatingFauxDOM,\n          isAnimatingFauxDOM: this.isAnimatingFauxDOM\n        });\n        return React.createElement(WrappedComponent, props);\n      }\n    });\n    WithFauxDOM.displayName = 'WithFauxDOM(' + getDisplayName(WrappedComponent) + ')';\n    return WithFauxDOM;\n  }\n\n  return withFauxDOM;\n}\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nmodule.exports = withFauxDOMFactory;","map":null,"metadata":{},"sourceType":"script"}