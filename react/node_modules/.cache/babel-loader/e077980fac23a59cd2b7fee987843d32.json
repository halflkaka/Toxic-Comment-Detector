{"ast":null,"code":"import { map } from \"d3-collection\";\nimport { dispatch } from \"d3-dispatch\";\nexport default function (url, callback) {\n  var request,\n      event = dispatch(\"beforesend\", \"progress\", \"load\", \"error\"),\n      _mimeType,\n      headers = map(),\n      xhr = new XMLHttpRequest(),\n      _user = null,\n      _password = null,\n      _response,\n      _responseType,\n      _timeout = 0; // If IE does not support CORS, use XDomainRequest.\n\n\n  if (typeof XDomainRequest !== \"undefined\" && !(\"withCredentials\" in xhr) && /^(http(s)?:)?\\/\\//.test(url)) xhr = new XDomainRequest();\n  \"onload\" in xhr ? xhr.onload = xhr.onerror = xhr.ontimeout = respond : xhr.onreadystatechange = function (o) {\n    xhr.readyState > 3 && respond(o);\n  };\n\n  function respond(o) {\n    var status = xhr.status,\n        result;\n\n    if (!status && hasResponse(xhr) || status >= 200 && status < 300 || status === 304) {\n      if (_response) {\n        try {\n          result = _response.call(request, xhr);\n        } catch (e) {\n          event.call(\"error\", request, e);\n          return;\n        }\n      } else {\n        result = xhr;\n      }\n\n      event.call(\"load\", request, result);\n    } else {\n      event.call(\"error\", request, o);\n    }\n  }\n\n  xhr.onprogress = function (e) {\n    event.call(\"progress\", request, e);\n  };\n\n  request = {\n    header: function header(name, value) {\n      name = (name + \"\").toLowerCase();\n      if (arguments.length < 2) return headers.get(name);\n      if (value == null) headers.remove(name);else headers.set(name, value + \"\");\n      return request;\n    },\n    // If mimeType is non-null and no Accept header is set, a default is used.\n    mimeType: function mimeType(value) {\n      if (!arguments.length) return _mimeType;\n      _mimeType = value == null ? null : value + \"\";\n      return request;\n    },\n    // Specifies what type the response value should take;\n    // for instance, arraybuffer, blob, document, or text.\n    responseType: function responseType(value) {\n      if (!arguments.length) return _responseType;\n      _responseType = value;\n      return request;\n    },\n    timeout: function timeout(value) {\n      if (!arguments.length) return _timeout;\n      _timeout = +value;\n      return request;\n    },\n    user: function user(value) {\n      return arguments.length < 1 ? _user : (_user = value == null ? null : value + \"\", request);\n    },\n    password: function password(value) {\n      return arguments.length < 1 ? _password : (_password = value == null ? null : value + \"\", request);\n    },\n    // Specify how to convert the response content to a specific type;\n    // changes the callback value on \"load\" events.\n    response: function response(value) {\n      _response = value;\n      return request;\n    },\n    // Alias for send(\"GET\", …).\n    get: function get(data, callback) {\n      return request.send(\"GET\", data, callback);\n    },\n    // Alias for send(\"POST\", …).\n    post: function post(data, callback) {\n      return request.send(\"POST\", data, callback);\n    },\n    // If callback is non-null, it will be used for error and load events.\n    send: function send(method, data, callback) {\n      xhr.open(method, url, true, _user, _password);\n      if (_mimeType != null && !headers.has(\"accept\")) headers.set(\"accept\", _mimeType + \",*/*\");\n      if (xhr.setRequestHeader) headers.each(function (value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n      if (_mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(_mimeType);\n      if (_responseType != null) xhr.responseType = _responseType;\n      if (_timeout > 0) xhr.timeout = _timeout;\n      if (callback == null && typeof data === \"function\") callback = data, data = null;\n      if (callback != null && callback.length === 1) callback = fixCallback(callback);\n      if (callback != null) request.on(\"error\", callback).on(\"load\", function (xhr) {\n        callback(null, xhr);\n      });\n      event.call(\"beforesend\", request, xhr);\n      xhr.send(data == null ? null : data);\n      return request;\n    },\n    abort: function abort() {\n      xhr.abort();\n      return request;\n    },\n    on: function on() {\n      var value = event.on.apply(event, arguments);\n      return value === event ? request : value;\n    }\n  };\n\n  if (callback != null) {\n    if (typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n    return request.get(callback);\n  }\n\n  return request;\n}\n\nfunction fixCallback(callback) {\n  return function (error, xhr) {\n    callback(error == null ? xhr : null);\n  };\n}\n\nfunction hasResponse(xhr) {\n  var type = xhr.responseType;\n  return type && type !== \"text\" ? xhr.response // null on error\n  : xhr.responseText; // \"\" on error\n}","map":null,"metadata":{},"sourceType":"module"}