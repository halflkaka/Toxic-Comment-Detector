{"ast":null,"code":"import { slice } from \"./array\";\nvar noabort = {};\n\nfunction Queue(size) {\n  this._size = size;\n  this._call = this._error = null;\n  this._tasks = [];\n  this._data = [];\n  this._waiting = this._active = this._ended = this._start = 0; // inside a synchronous task callback?\n}\n\nQueue.prototype = queue.prototype = {\n  constructor: Queue,\n  defer: function defer(callback) {\n    if (typeof callback !== \"function\") throw new Error(\"invalid callback\");\n    if (this._call) throw new Error(\"defer after await\");\n    if (this._error != null) return this;\n    var t = slice.call(arguments, 1);\n    t.push(callback);\n    ++this._waiting, this._tasks.push(t);\n    poke(this);\n    return this;\n  },\n  abort: function abort() {\n    if (this._error == null) _abort(this, new Error(\"abort\"));\n    return this;\n  },\n  await: function _await(callback) {\n    if (typeof callback !== \"function\") throw new Error(\"invalid callback\");\n    if (this._call) throw new Error(\"multiple await\");\n\n    this._call = function (error, results) {\n      callback.apply(null, [error].concat(results));\n    };\n\n    maybeNotify(this);\n    return this;\n  },\n  awaitAll: function awaitAll(callback) {\n    if (typeof callback !== \"function\") throw new Error(\"invalid callback\");\n    if (this._call) throw new Error(\"multiple await\");\n    this._call = callback;\n    maybeNotify(this);\n    return this;\n  }\n};\n\nfunction poke(q) {\n  if (!q._start) {\n    try {\n      start(q);\n    } // let the current task complete\n    catch (e) {\n      if (q._tasks[q._ended + q._active - 1]) _abort(q, e); // task errored synchronously\n      else if (!q._data) throw e; // await callback errored synchronously\n    }\n  }\n}\n\nfunction start(q) {\n  while (q._start = q._waiting && q._active < q._size) {\n    var i = q._ended + q._active,\n        t = q._tasks[i],\n        j = t.length - 1,\n        c = t[j];\n    t[j] = end(q, i);\n    --q._waiting, ++q._active;\n    t = c.apply(null, t);\n    if (!q._tasks[i]) continue; // task finished synchronously\n\n    q._tasks[i] = t || noabort;\n  }\n}\n\nfunction end(q, i) {\n  return function (e, r) {\n    if (!q._tasks[i]) return; // ignore multiple callbacks\n\n    --q._active, ++q._ended;\n    q._tasks[i] = null;\n    if (q._error != null) return; // ignore secondary errors\n\n    if (e != null) {\n      _abort(q, e);\n    } else {\n      q._data[i] = r;\n      if (q._waiting) poke(q);else maybeNotify(q);\n    }\n  };\n}\n\nfunction _abort(q, e) {\n  var i = q._tasks.length,\n      t;\n  q._error = e; // ignore active callbacks\n\n  q._data = undefined; // allow gc\n\n  q._waiting = NaN; // prevent starting\n\n  while (--i >= 0) {\n    if (t = q._tasks[i]) {\n      q._tasks[i] = null;\n\n      if (t.abort) {\n        try {\n          t.abort();\n        } catch (e) {\n          /* ignore */\n        }\n      }\n    }\n  }\n\n  q._active = NaN; // allow notification\n\n  maybeNotify(q);\n}\n\nfunction maybeNotify(q) {\n  if (!q._active && q._call) {\n    var d = q._data;\n    q._data = undefined; // allow gc\n\n    q._call(q._error, d);\n  }\n}\n\nexport default function queue(concurrency) {\n  if (concurrency == null) concurrency = Infinity;else if (!((concurrency = +concurrency) >= 1)) throw new Error(\"invalid concurrency\");\n  return new Queue(concurrency);\n}","map":null,"metadata":{},"sourceType":"module"}