{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _d3Scale = require('d3-scale');\n\nvar _d = require('d3');\n\nvar _shared = require('../shared');\n\nvar _interpolate = require('../interpolate');\n\nvar _interpolate2 = _interopRequireDefault(_interpolate);\n\nvar _d3Array = require('d3-array');\n\nvar _d3TimeFormat = require('d3-time-format');\n\nvar _reactFauxDom = require('react-faux-dom');\n\nvar _reactFauxDom2 = _interopRequireDefault(_reactFauxDom);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _radium = require('radium');\n\nvar _lodash = require('lodash.merge');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar dateParser = {};\nvar colorScale = (0, _d.scaleOrdinal)(_d.schemeCategory20).domain((0, _d.range)(0, 20));\n\nvar BarChart = function (_PureComponent) {\n  (0, _inherits3.default)(BarChart, _PureComponent);\n  (0, _createClass3.default)(BarChart, null, [{\n    key: 'propTypes',\n    get: function get() {\n      return {\n        data: _propTypes2.default.array.isRequired,\n        lineData: _propTypes2.default.array,\n        width: _propTypes2.default.number,\n        height: _propTypes2.default.number,\n        margin: _propTypes2.default.object,\n        mouseOverHandler: _propTypes2.default.func,\n        mouseOutHandler: _propTypes2.default.func,\n        mouseMoveHandler: _propTypes2.default.func,\n        clickHandler: _propTypes2.default.func,\n        interpolate: _propTypes2.default.string,\n        style: _propTypes2.default.object,\n        colorBars: _propTypes2.default.bool,\n        axes: _propTypes2.default.bool,\n        grid: _propTypes2.default.bool,\n        axisLabels: _propTypes2.default.shape({\n          x: _propTypes2.default.string,\n          y: _propTypes2.default.string\n        }),\n        xType: _propTypes2.default.string,\n        yType: _propTypes2.default.string,\n        y2Type: _propTypes2.default.string,\n        xDomainRange: _propTypes2.default.array,\n        yDomainRange: _propTypes2.default.array,\n        datePattern: _propTypes2.default.string,\n        tickTimeDisplayFormat: _propTypes2.default.string,\n        yAxisOrientRight: _propTypes2.default.bool,\n        barWidth: _propTypes2.default.number,\n        xTickNumber: _propTypes2.default.number,\n        yTickNumber: _propTypes2.default.number\n      };\n    }\n  }, {\n    key: 'defaultProps',\n    get: function get() {\n      return {\n        lineData: [],\n        width: 400,\n        height: 200,\n        barWidth: 10,\n        axes: false,\n        xType: 'text',\n        yType: 'linear',\n        y2Type: 'linear',\n        interpolate: 'linear',\n        mouseOverHandler: function mouseOverHandler() {},\n        mouseOutHandler: function mouseOutHandler() {},\n        mouseMoveHandler: function mouseMoveHandler() {},\n        clickHandler: function clickHandler() {},\n        datePattern: '%d-%b-%y',\n        axisLabels: {\n          x: '',\n          y: ''\n        }\n      };\n    }\n  }]);\n\n  function BarChart(props) {\n    (0, _classCallCheck3.default)(this, BarChart);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (BarChart.__proto__ || (0, _getPrototypeOf2.default)(BarChart)).call(this, props));\n\n    _this.uid = (0, _shared.createUniqueID)(props);\n    return _this;\n  }\n\n  (0, _createClass3.default)(BarChart, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var ref = this.refs.barChart;\n      (0, _shared.createCircularTicks)(ref);\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      var ref = this.refs.barChart;\n      (0, _shared.createCircularTicks)(ref);\n    }\n  }, {\n    key: 'createDomainRangeGenerator',\n    value: function createDomainRangeGenerator(axesType, domainRange, data, type, length) {\n      var _this2 = this;\n\n      var dataIndex = axesType === 'x' ? 'x' : 'y';\n      var barPadding = length / data.length > 40 ? 0.02 : 0.04;\n\n      var parseDate = function parseDate(v) {\n        return _this2.parseDate(v);\n      };\n\n      var axis = void 0;\n\n      switch (type) {\n        case 'text':\n          axis = (0, _d3Scale.scaleBand)();\n          axis.domain(data.map(function (d) {\n            return d[dataIndex];\n          })).range([0, length]).padding(barPadding);\n          break;\n\n        case 'linear':\n          axis = (0, _d3Scale.scaleLinear)();\n          axis.domain(Array.isArray(domainRange) ? domainRange // calculateDomainRange(domainRange, type, parseDate)\n          : [0, (0, _d.max)(data, function (d) {\n            return d[dataIndex];\n          })]).range(axesType === 'x' ? [0, length] : [length, 0]);\n          break;\n\n        case 'time':\n          axis = (0, _d.scaleTime)();\n          axis.domain(Array.isArray(domainRange) ? (0, _shared.calculateDomainRange)(domainRange, type, parseDate) : (0, _d3Array.extent)(data, function (d) {\n            return parseDate(d[dataIndex]);\n          })).range(axesType === 'x' ? [0, length] : [length, 0]);\n          break;\n\n        default:\n          break;\n      }\n\n      return axis;\n    }\n  }, {\n    key: 'defineColor',\n    value: function defineColor(i, d, colorBars) {\n      if (d.color) return d.color;\n      if (colorBars) return colorScale(i);\n      return null;\n    }\n  }, {\n    key: 'createSvgNode',\n    value: function createSvgNode(_ref) {\n      var m = _ref.m,\n          w = _ref.w,\n          h = _ref.h;\n      var node = new _reactFauxDom2.default.Element('svg');\n      node.setAttribute('width', w + m.left + m.right);\n      node.setAttribute('height', h + m.top + m.bottom);\n      return node;\n    }\n  }, {\n    key: 'createSvgRoot',\n    value: function createSvgRoot(_ref2) {\n      var node = _ref2.node,\n          m = _ref2.m;\n      return (0, _d.select)(node).append('g').attr('transform', 'translate(' + m.left + ', ' + m.top + ')');\n    }\n  }, {\n    key: 'createXAxis',\n    value: function createXAxis(_ref3) {\n      var root = _ref3.root,\n          m = _ref3.m,\n          w = _ref3.w,\n          h = _ref3.h,\n          x = _ref3.x;\n      var _props = this.props,\n          label = _props.axisLabels.x,\n          xType = _props.xType,\n          tickTimeDisplayFormat = _props.tickTimeDisplayFormat,\n          xTickNumber = _props.xTickNumber,\n          yAxisOrientRight = _props.yAxisOrientRight;\n      var axis = (0, _d.axisBottom)(x);\n\n      if (xType === 'time' && tickTimeDisplayFormat) {\n        axis.tickFormat((0, _d.timeFormat)(tickTimeDisplayFormat));\n      }\n\n      axis.tickSize(0).tickPadding(15);\n\n      if (xTickNumber) {\n        axis.ticks(xTickNumber);\n      }\n\n      var group = root.append('g').attr('class', 'x axis').attr('transform', 'translate(0, ' + h + ')');\n      group.call(axis);\n\n      if (label) {\n        group.append('text').attr('class', 'label').attr('x', yAxisOrientRight ? 0 : w).attr('y', m.bottom - 10).style('text-anchor', yAxisOrientRight ? 'start' : 'end').text(label);\n      }\n    }\n  }, {\n    key: 'createYAxis',\n    value: function createYAxis(_ref4) {\n      var root = _ref4.root,\n          m = _ref4.m,\n          w = _ref4.w,\n          y = _ref4.y;\n      var _props2 = this.props,\n          label = _props2.axisLabels.y,\n          yTickNumber = _props2.yTickNumber,\n          yAxisOrientRight = _props2.yAxisOrientRight,\n          grid = _props2.grid;\n      var axis = yAxisOrientRight ? (0, _d.axisRight)(y) : (0, _d.axisLeft)(y);\n\n      if (yTickNumber) {\n        axis.ticks(yTickNumber);\n      }\n\n      if (grid) {\n        axis.tickSize(-w, 6).tickPadding(12);\n      } else {\n        axis.tickPadding(10);\n      }\n\n      var group = root.append('g').attr('class', 'y axis');\n      group.call(axis);\n\n      if (label) {\n        group.attr('transform', yAxisOrientRight ? 'translate(' + w + ', 0)' : 'translate(0, 0)').append('text').attr('class', 'label').attr('transform', 'rotate(-90)').attr('x', 0).attr('y', yAxisOrientRight ? -25 + m.right : 10 - m.left).attr('dy', '.9em').style('text-anchor', 'end').text(label);\n      }\n    }\n  }, {\n    key: 'createYAxis2',\n    value: function createYAxis2(_ref5) {\n      var root = _ref5.root,\n          m = _ref5.m,\n          w = _ref5.w,\n          h = _ref5.h;\n      var _props3 = this.props,\n          lineData = _props3.lineData,\n          label = _props3.axisLabels.y2,\n          y2Type = _props3.y2Type,\n          yTickNumber = _props3.yTickNumber,\n          yAxisOrientRight = _props3.yAxisOrientRight,\n          grid = _props3.grid,\n          yDomainRange = _props3.yDomainRange;\n      var y = this.createDomainRangeGenerator('y', yDomainRange, lineData, y2Type, h);\n      var axis = yAxisOrientRight ? (0, _d.axisRight)(y) : (0, _d.axisLeft)(y);\n\n      if (yTickNumber) {\n        axis.ticks(yTickNumber);\n      }\n\n      if (grid) {\n        axis.tickSize(-w, 6).tickPadding(12);\n      } else {\n        axis.tickPadding(10);\n      }\n\n      var group = root.append('g').attr('class', 'y axis');\n      group.call(axis);\n\n      if (label) {\n        group.attr('transform', yAxisOrientRight ? 'translate(0, 0)' : 'translate(' + w + ', 0)').append('text').attr('class', 'label').attr('transform', 'rotate(-90)').attr('x', 0).attr('y', yAxisOrientRight ? 10 - m.left : -25 + m.right).attr('dy', '.9em').style('text-anchor', 'end').text(label);\n      }\n    }\n  }, {\n    key: 'createBarChart',\n    value: function createBarChart(_ref6) {\n      var _this3 = this;\n\n      var root = _ref6.root,\n          h = _ref6.h,\n          x = _ref6.x,\n          y = _ref6.y;\n      var _props4 = this.props,\n          data = _props4.data,\n          mouseOverHandler = _props4.mouseOverHandler,\n          mouseOutHandler = _props4.mouseOutHandler,\n          mouseMoveHandler = _props4.mouseMoveHandler,\n          clickHandler = _props4.clickHandler,\n          colorBars = _props4.colorBars,\n          xType = _props4.xType,\n          barWidth = _props4.barWidth;\n\n      var calculateDate = function calculateDate(v) {\n        return _this3.parseDate(v);\n      };\n\n      var calculateFill = function calculateFill(d, i) {\n        return _this3.defineColor(i, d, colorBars);\n      };\n\n      var calculateX = function calculateX(d) {\n        return xType === 'time' ? x(calculateDate(d.x)) : x(d.x);\n      };\n\n      var calculateY = function calculateY(d) {\n        return y(d.y);\n      };\n\n      var calculateW = function calculateW() {\n        return xType === 'text' ? x.bandwidth() : barWidth;\n      };\n\n      var calculateH = function calculateH(d) {\n        return h - y(d.y);\n      };\n\n      var mouseover = function mouseover(d) {\n        return mouseOverHandler(d, _d.event);\n      };\n\n      var mouseout = function mouseout(d) {\n        return mouseOutHandler(d, _d.event);\n      };\n\n      var mousemove = function mousemove(d) {\n        return mouseMoveHandler(d, _d.event);\n      };\n\n      var click = function click(d) {\n        return clickHandler(d, _d.event);\n      };\n\n      var group = root.selectAll('rect') // '.bar'\n      .data(data);\n      group.enter().append('rect').attr('class', 'bar').style('fill', calculateFill).attr('x', calculateX).attr('y', calculateY).attr('width', calculateW).attr('height', calculateH).on('mouseover', mouseover).on('mouseout', mouseout).on('mousemove', mousemove).on('click', click);\n      group.exit().remove();\n    }\n  }, {\n    key: 'createLinePath',\n    value: function createLinePath(_ref7) {\n      var _this4 = this;\n\n      var root = _ref7.root,\n          h = _ref7.h,\n          x = _ref7.x;\n      var _props5 = this.props,\n          lineData = _props5.lineData,\n          xType = _props5.xType,\n          y2Type = _props5.y2Type,\n          interpolate = _props5.interpolate,\n          yDomainRange = _props5.yDomainRange;\n\n      var parseDate = function parseDate(v) {\n        return _this4.parseDate(v);\n      };\n\n      var y = this.createDomainRangeGenerator('y', yDomainRange, lineData, y2Type, h);\n      var yValue = (0, _shared.createValueGenerator)('y', y2Type, parseDate);\n      var xValue = (0, _shared.createValueGenerator)('x', xType, parseDate);\n      var linePath = (0, _d.line)().curve((0, _interpolate2.default)(interpolate)).x(function (d) {\n        return x(xValue(d));\n      }).y(function (d) {\n        return y(yValue(d));\n      });\n      root.append('path').datum(lineData).attr('class', 'line').attr('style', 'stroke: red').attr('d', linePath);\n    }\n  }, {\n    key: 'createStyle',\n    value: function createStyle() {\n      var _props6 = this.props,\n          style = _props6.style,\n          yAxisOrientRight = _props6.yAxisOrientRight,\n          grid = _props6.grid;\n      var uid = this.uid;\n      var scope = '.bar-chart-' + uid;\n      var axisStyles = (0, _shared.getAxisStyles)(grid, false, yAxisOrientRight);\n      var rules = (0, _lodash2.default)({}, _shared.defaultStyles, style, axisStyles);\n      return _react2.default.createElement(_radium.Style, {\n        scopeSelector: scope,\n        rules: rules\n      });\n    }\n  }, {\n    key: 'hasLineData',\n    value: function hasLineData() {\n      var lineData = this.props.lineData;\n      return lineData.length > 0;\n    }\n  }, {\n    key: 'parseDate',\n    value: function parseDate(v) {\n      var datePattern = this.props.datePattern;\n      var datePatternParser = dateParser[datePattern] || (dateParser[datePattern] = (0, _d3TimeFormat.timeParse)(datePattern));\n      return datePatternParser(v);\n    }\n  }, {\n    key: 'calculateChartParameters',\n    value: function calculateChartParameters() {\n      var _props7 = this.props,\n          data = _props7.data,\n          axes = _props7.axes,\n          xType = _props7.xType,\n          yType = _props7.yType,\n          yAxisOrientRight = _props7.yAxisOrientRight,\n          xDomainRange = _props7.xDomainRange,\n          yDomainRange = _props7.yDomainRange,\n          margin = _props7.margin,\n          width = _props7.width,\n          height = _props7.height;\n      var hasLineData = this.hasLineData();\n      var m = (0, _shared.calculateMargin)(axes, margin, yAxisOrientRight, hasLineData);\n      var w = (0, _shared.reduce)(width, m.left, m.right);\n      var h = (0, _shared.reduce)(height, m.top, m.bottom);\n      var x = this.createDomainRangeGenerator('x', xDomainRange, data, xType, w);\n      var y = this.createDomainRangeGenerator('y', yDomainRange, data, yType, h);\n      var node = this.createSvgNode({\n        m: m,\n        w: w,\n        h: h\n      });\n      var root = this.createSvgRoot({\n        node: node,\n        m: m\n      });\n      return {\n        m: m,\n        w: w,\n        h: h,\n        x: x,\n        y: y,\n        node: node,\n        root: root\n      };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var axes = this.props.axes;\n      var hasLineData = this.hasLineData();\n      var p = this.calculateChartParameters();\n\n      if (axes) {\n        this.createXAxis(p);\n        this.createYAxis(p); // const yAxis = this.createYAxis(p);\n\n        if (hasLineData) {\n          this.createYAxis2(p); // { ...p, yAxis });\n        }\n      }\n\n      this.createBarChart(p);\n\n      if (hasLineData) {\n        this.createLinePath(p);\n      }\n\n      var uid = this.uid;\n      var className = 'bar-chart-' + uid;\n      var node = p.node;\n      return _react2.default.createElement('div', {\n        ref: 'barChart',\n        className: className\n      }, this.createStyle(), node.toReact());\n    }\n  }]);\n  return BarChart;\n}(_react.PureComponent);\n\nexports.default = BarChart;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}