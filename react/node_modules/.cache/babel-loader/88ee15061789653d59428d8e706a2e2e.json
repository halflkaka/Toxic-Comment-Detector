{"ast":null,"code":"var React = require('react');\n\nvar styleAttr = require('style-attr');\n\nvar querySelectorAll = require('query-selector');\n\nvar camelCase = require('./utils/camelCase');\n\nvar isString = require('./utils/isString');\n\nvar isUndefined = require('./utils/isUndefined');\n\nvar assign = require('./utils/assign');\n\nvar mapValues = require('./utils/mapValues');\n\nvar styleCamelCase = require('./utils/styleCamelCase');\n\nfunction element() {\n  function Element(nodeName, parentNode) {\n    this.nodeName = nodeName;\n    this.parentNode = parentNode;\n    this.childNodes = [];\n    this.eventListeners = {};\n    this.text = '';\n    var self = this;\n    var props = this.props = {\n      ref: function ref(component) {\n        self.component = component;\n      },\n      style: {\n        setProperty: function setProperty(name, value) {\n          props.style[styleCamelCase(name)] = value;\n        },\n        getProperty: function getProperty(name) {\n          return props.style[styleCamelCase(name)] || '';\n        },\n        getPropertyValue: function getPropertyValue(name) {\n          return props.style.getProperty(name);\n        },\n        removeProperty: function removeProperty(name) {\n          delete props.style[styleCamelCase(name)];\n        }\n      }\n    };\n    this.style = props.style;\n  }\n\n  Element.prototype.nodeType = 1; // This was easy to do with Vim.\n  // Just saying.\n\n  Element.prototype.eventNameMappings = {\n    'blur': 'onBlur',\n    'change': 'onChange',\n    'click': 'onClick',\n    'contextmenu': 'onContextMenu',\n    'copy': 'onCopy',\n    'cut': 'onCut',\n    'doubleclick': 'onDoubleClick',\n    'drag': 'onDrag',\n    'dragend': 'onDragEnd',\n    'dragenter': 'onDragEnter',\n    'dragexit': 'onDragExit',\n    'dragleave': 'onDragLeave',\n    'dragover': 'onDragOver',\n    'dragstart': 'onDragStart',\n    'drop': 'onDrop',\n    'error': 'onError',\n    'focus': 'onFocus',\n    'input': 'onInput',\n    'keydown': 'onKeyDown',\n    'keypress': 'onKeyPress',\n    'keyup': 'onKeyUp',\n    'load': 'onLoad',\n    'mousedown': 'onMouseDown',\n    'mouseenter': 'onMouseEnter',\n    'mouseleave': 'onMouseLeave',\n    'mousemove': 'onMouseMove',\n    'mouseout': 'onMouseOut',\n    'mouseover': 'onMouseOver',\n    'mouseup': 'onMouseUp',\n    'paste': 'onPaste',\n    'scroll': 'onScroll',\n    'submit': 'onSubmit',\n    'touchcancel': 'onTouchCancel',\n    'touchend': 'onTouchEnd',\n    'touchmove': 'onTouchMove',\n    'touchstart': 'onTouchStart',\n    'wheel': 'onWheel'\n  };\n  Element.prototype.skipNameTransformationExpressions = [/^data-/, /^aria-/];\n  Element.prototype.attributeNameMappings = {\n    'class': 'className'\n  };\n\n  Element.prototype.attributeToPropName = function (name) {\n    var skipTransformMatches = this.skipNameTransformationExpressions.map(function (expr) {\n      return expr.test(name);\n    });\n\n    if (skipTransformMatches.some(Boolean)) {\n      return name;\n    } else {\n      return this.attributeNameMappings[name] || camelCase(name);\n    }\n  };\n\n  Element.prototype.setAttribute = function (name, value) {\n    if (name === 'style' && isString(value)) {\n      var styles = styleAttr.parse(value);\n\n      for (var key in styles) {\n        this.style.setProperty(key, styles[key]);\n      }\n    } else {\n      this.props[this.attributeToPropName(name)] = value;\n    }\n  };\n\n  Element.prototype.getAttribute = function (name) {\n    return this.props[this.attributeToPropName(name)];\n  };\n\n  Element.prototype.getAttributeNode = function (name) {\n    var value = this.getAttribute(name);\n\n    if (!isUndefined(value)) {\n      return {\n        value: value,\n        specified: true\n      };\n    }\n  };\n\n  Element.prototype.removeAttribute = function (name) {\n    delete this.props[this.attributeToPropName(name)];\n  };\n\n  Element.prototype.eventToPropName = function (name) {\n    return this.eventNameMappings[name] || name;\n  };\n\n  Element.prototype.addEventListener = function (name, fn) {\n    var prop = this.eventToPropName(name);\n    this.eventListeners[prop] = this.eventListeners[prop] || [];\n    this.eventListeners[prop].push(fn);\n  };\n\n  Element.prototype.removeEventListener = function (name, fn) {\n    var listeners = this.eventListeners[this.eventToPropName(name)];\n\n    if (listeners) {\n      var match = listeners.indexOf(fn);\n\n      if (match !== -1) {\n        listeners.splice(match, 1);\n      }\n    }\n  };\n\n  Element.prototype.appendChild = function (el) {\n    if (el instanceof Element) {\n      el.parentNode = this;\n    }\n\n    this.childNodes.push(el);\n    return el;\n  };\n\n  Element.prototype.insertBefore = function (el, before) {\n    var index = this.childNodes.indexOf(before);\n    el.parentNode = this;\n\n    if (index !== -1) {\n      this.childNodes.splice(index, 0, el);\n    } else {\n      this.childNodes.push(el);\n    }\n\n    return el;\n  };\n\n  Element.prototype.removeChild = function (child) {\n    var target = this.childNodes.indexOf(child);\n    this.childNodes.splice(target, 1);\n  };\n\n  Element.prototype.querySelector = function () {\n    return this.querySelectorAll.apply(this, arguments)[0] || null;\n  };\n\n  Element.prototype.querySelectorAll = function (selector) {\n    if (!selector) {\n      throw new Error('Not enough arguments');\n    }\n\n    return querySelectorAll(selector, this);\n  };\n\n  Element.prototype.getElementsByTagName = function (nodeName) {\n    var children = this.children;\n\n    if (children.length === 0) {\n      return [];\n    } else {\n      var matches;\n\n      if (nodeName !== '*') {\n        matches = children.filter(function (el) {\n          return el.nodeName === nodeName;\n        });\n      } else {\n        matches = children;\n      }\n\n      var childMatches = children.map(function (el) {\n        return el.getElementsByTagName(nodeName);\n      });\n      return matches.concat.apply(matches, childMatches);\n    }\n  };\n\n  Element.prototype.getElementById = function (id) {\n    var children = this.children;\n\n    if (children.length === 0) {\n      return null;\n    } else {\n      var match = children.filter(function (el) {\n        return el.getAttribute('id') === id;\n      })[0];\n\n      if (match) {\n        return match;\n      } else {\n        var childMatches = children.map(function (el) {\n          return el.getElementById(id);\n        });\n        return childMatches.filter(function (match) {\n          return match !== null;\n        })[0] || null;\n      }\n    }\n  };\n\n  Element.prototype.getBoundingClientRect = function () {\n    if (!this.component) {\n      return undefined;\n    }\n\n    return this.component.getBoundingClientRect();\n  };\n\n  Element.prototype.toReact = function (index) {\n    index = index || 0;\n    var props = assign({}, this.props);\n    props.style = assign({}, props.style);\n    var originalElement = this;\n\n    function uniqueKey() {\n      return 'faux-dom-' + index;\n    }\n\n    if (isUndefined(props.key)) {\n      props.key = uniqueKey();\n    }\n\n    delete props.style.setProperty;\n    delete props.style.getProperty;\n    delete props.style.getPropertyValue;\n    delete props.style.removeProperty;\n    assign(props, mapValues(this.eventListeners, function (listeners) {\n      return function (syntheticEvent) {\n        var event;\n\n        if (syntheticEvent) {\n          event = syntheticEvent.nativeEvent;\n          event.syntheticEvent = syntheticEvent;\n        }\n\n        mapValues(listeners, function (listener) {\n          listener.call(originalElement, event);\n        });\n      };\n    }));\n    return React.createElement(this.nodeName, props, this.text || this.children.map(function (el, i) {\n      if (el instanceof Element) {\n        return el.toReact(i);\n      } else {\n        return el;\n      }\n    }));\n  };\n\n  Object.defineProperties(Element.prototype, {\n    nextSibling: {\n      get: function get() {\n        var siblings = this.parentNode.children;\n        var me = siblings.indexOf(this);\n        return siblings[me + 1];\n      }\n    },\n    previousSibling: {\n      get: function get() {\n        var siblings = this.parentNode.children;\n        var me = siblings.indexOf(this);\n        return siblings[me - 1];\n      }\n    },\n    innerHTML: {\n      get: function get() {\n        return this.text;\n      },\n      set: function set(text) {\n        this.text = text;\n      }\n    },\n    textContent: {\n      get: function get() {\n        return this.text;\n      },\n      set: function set(text) {\n        this.text = text;\n      }\n    },\n    children: {\n      get: function get() {\n        // So far nodes created by this library are all of nodeType 1 (elements),\n        // but this could change in the future.\n        return this.childNodes.filter(function (el) {\n          if (!el.nodeType) {\n            // It's a React element, we always add it\n            return true;\n          } // It's a HTML node. We want to filter to have only nodes with type 1\n\n\n          return el.nodeType === 1;\n        });\n      }\n    }\n  }); // These NS methods are called by things like D3 if it spots a namespace.\n  // Like xlink:href. I don't care about namespaces, so these functions have NS aliases created.\n\n  var namespaceMethods = ['setAttribute', 'getAttribute', 'getAttributeNode', 'removeAttribute', 'getElementsByTagName', 'getElementById'];\n  namespaceMethods.forEach(function (name) {\n    var fn = Element.prototype[name];\n\n    Element.prototype[name + 'NS'] = function () {\n      return fn.apply(this, Array.prototype.slice.call(arguments, 1));\n    };\n  });\n  return Element;\n}\n\nmodule.exports = element;","map":null,"metadata":{},"sourceType":"script"}